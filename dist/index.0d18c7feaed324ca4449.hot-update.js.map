{"version":3,"sources":["webpack:///./app/routes/index.js?undefined"],"names":["console","log","App","typeDefs","resolvers","Query","hello","Route","constructor","app","init","createRouter","router","Router","prefix","middleware","common","checkToken","use","ctx","next","request","header","cookies","response","token","get","getUserIfo","then","value","userInfo","catch","error","body","merge","unauthorized","msg","addRouters","User","bizModRouter","query","variables","baseSchema","schema","makeExecutableSchema","graphql","data","errors","graphqlError","type","shtml","lg","Promise","resolve","reject","fs","path","__dirname","err","replace","renderToString","routes","allowedMethods"],"mappings":"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","file":"index.0d18c7feaed324ca4449.hot-update.js","sourcesContent":["// import {\n//   GraphQLObjectType,\n//   GraphQLNonNull,\n//   GraphQLSchema,\n//   GraphQLString,\n//   GraphQLList,\n// } from \"graphql/type\";\nimport {\n  graphql,\n  Source,\n  validateSchema,\n  parse,\n  validate,\n  execute,\n  formatError,\n  getOperationAST,\n  specifiedRules,\n  validationRules,\n  // gql,\n} from \"graphql\";\nimport httpError from \"http-errors\";\nimport { createToken, checkToken, destroyToken, getUserIfo } from \"@/redis\";\nimport { merge } from \"@/utils\";\nimport { graphqlError } from \"@/constant\";\nimport Router from \"koa-router\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { makeExecutableSchema } from \"graphql-tools\";\n// import Home from \"./home\";\nimport User from \"./user\";\nimport { common } from \"@/middleware/index\";\nimport { router as bizModRouter } from \"@/bizMod/index\";\nimport { unsupported, unauthorized } from \"@/constant\";\n// import { schema } from \"@/graphql/schema\";\nimport  App  from \"@/view/App\";\nimport { renderToString } from 'react-dom/server';\n\n// console.log(\"bizModRouter======\", bizModRouter);\n// console.log(\"schema======\", schema.typeDefs.schema);\nconsole.log('App===',App)\nconst typeDefs = `\n  type Query {\n    hello: String\n  }\n`;\n\n// Provide resolver functions for your schema fields\nconst resolvers = {\n  Query: {\n    hello: () => \"Hello world!\",\n  },\n};\n\nclass Route {\n  constructor(app) {\n    this.app = app;\n    // this.router = router;\n    this.init();\n  }\n  createRouter() {\n    this.router = new Router({\n      prefix: \"/api\", // 给路由统一加个前缀：\n    });\n  }\n  // 添加中间件\n  middleware() {\n    // 添加 404 500 中间件\n    common(this.app, this.router);\n  }\n\n  checkToken() {\n    this.router.use(async (ctx, next) => {\n      const {\n        request: { header },\n        cookies,\n        response,\n      } = ctx;\n\n      const token = cookies.get(\"token\") || header.token;\n\n      await getUserIfo(token)\n        .then(async (value) => {\n          console.log(\"value=\", value);\n          response.userInfo = value;\n          await next();\n        })\n        .catch((error) => {\n          response.userInfo = null;\n          ctx.response.body = merge(unauthorized, {\n            msg: \"登录回话已过期，请重新登录\",\n          });\n        });\n\n      //  await next();\n    });\n  }\n  // 添加路由\n  addRouters() {\n    new User(this.app, this.router);\n    bizModRouter(this.app, this.router);\n\n    // new bizMod.abnormity.script.router(this.app, this.router)\n\n    console.log(\"checkToken====\");\n\n    this.checkToken();\n\n    // 查询\n    this.router.get(\"/data\", async (ctx, next) => {\n      const {\n        query: { query = \"\", variables = {} },\n        response,\n        request,\n      } = ctx;\n      const {\n        body: {\n          // mutation = '', variables = {}\n        },\n      } = request;\n\n      // console.log('cookies===', cookies.get('token'));\n      // const { query = '', variables = {} } = ctx.query;\n      // const { response } = ctx;\n      // console.log('schema==',schema)\n      // console.log(\"query==\", query);\n      // console.log(\"variables==\", variables);\n      // console.log(\"token=====\", ctx.cookies.get(\"token\"));\n      // ctx.response.body = {\n      //   name:'123'\n      // }\n      const baseSchema = `\n                    schema {\n                        query: Query\n                        mutation: Mutation\n                    }\n              `;\n\n      const schema = makeExecutableSchema({\n        typeDefs: [\n          schema.typeDefs.schema\n          // baseSchema,\n          // typeDefs,\n          //   baseSchema,\n          //   userType,\n          //   songType,\n          //   playlistType\n        ],\n        resolvers: schema.resolvers,\n        //  merge(\n        //   {},\n        //   userResolvers,\n        //   songResolvers,\n        //   playlistResolvers\n        // )\n      });\n\n      await graphql(schema, query, { ctx, next }, variables)\n        .then((data) => {\n          const { errors } = data;\n          // console.log(\"data=\", data);\n          // console.log(\"stringify data=\", JSON.stringify(data));\n\n          if (errors) {\n            response.body = merge(graphqlError, {\n              errors,\n            });\n          } else {\n            // console.log(\"get==\", data);\n            // ctx.response.body = {\n            //   name:'123'\n            // }\n            response.body = data;\n\n            // JSON.stringify(data);\n          }\n        })\n        .catch((error) => {\n          console.log(\"error==\", error);\n        });\n    });\n    // //变异\n    // this.router.post('/data', async (ctx, next) => {\n    //     const {\n    //         // query: { query = '', variables = {} },\n    //         response,\n    //         request,\n    //     } = ctx;\n    //     const {\n    //         body: { mutation = '', variables = {} },\n    //     } = request;\n    //     await graphql(schema, mutation, { ctx, next }, variables)\n    //         .then((data) => {\n    //             const { errors } = data;\n    //             if (errors) {\n    //                 response.body = merge(graphqlError, {\n    //                     errors,\n    //                 });\n    //             } else {\n    //                 console.log('post==', data);\n    //                 response.body = data;\n    //             }\n    //         })\n    //         .catch((error) => {\n    //             console.log('error==', error);\n    //         });\n    // });\n\n    //  const server = new ApolloServer({ typeDefs, resolvers });\n\n    //  this.router.get('/data',server.getMiddleware())\n\n    this.router.get('*', async (ctx, next) => {\n      ctx.response.type = 'html'; //指定content type\n      let shtml = '';\n      console.lg\n      await new Promise((resolve, reject) => {\n        fs.readFile(path.join(__dirname, '../build/index.html'), 'utfa8', function(err, data) {\n          if (err) {\n            reject();\n            return console.log(err);\n          }\n          shtml = data;\n          resolve();\n        });\n      });\n      // 替换掉 {{root}} 为我们生成后的HTML\n      ctx.response.body = shtml.replace('{{root}}', renderToString(<App />));\n    })\n   \n \n\n\n    // 挂载路由中间件\n    this.app.use(this.router.routes()).use(this.router.allowedMethods());\n\n    // this.app.use(this.router.routes()).use(this.router.allowedMethods());\n  }\n  init() {\n    // 添加中间件\n    this.middleware();\n    //创建路由\n    this.createRouter();\n\n    // 添加路由\n    this.addRouters();\n  }\n}\n\nexport default Route;\n"],"sourceRoot":""}