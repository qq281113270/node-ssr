{"version":3,"sources":["webpack:///./app/constant/httpCode.js?undefined","webpack:///./app/constant/index.js?undefined","webpack:///./app/routes/index.js?undefined","webpack:///external \"graphql\"?undefined","webpack:///external \"graphql-tools\"?undefined"],"names":["graphqlError","code","msg","unsupported","unauthorized","typeDefs","resolvers","Query","hello","Route","constructor","app","init","createRouter","router","Router","prefix","middleware","common","checkToken","use","ctx","next","request","header","cookies","response","token","get","getUserIfo","then","value","console","log","userInfo","catch","error","body","merge","addRouters","User","bizModRouter","type","shtml","Promise","resolve","reject","fs","path","__dirname","err","data","replace","renderToString","routes","allowedMethods"],"mappings":"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","file":"index.a4ffc3d44fdea42c2858.hot-update.js","sourcesContent":["const graphqlError = {\n  code :400,\n  msg :\"请求参数有误，graphql语法错误\",\n}\n\n\nconst unsupported = {\n  //对于当前请求的方法和所请求的资源，请求中提交的实体并不是服务器中所支持的格式，因此请求被拒绝。\n  code :415,\n  msg :\"服务器已经理解请求，但是拒绝执行它\",\n}\n\nconst unauthorized = {\n  // 当前请求需要用户验证. 如果验证不通过则返回401\n  code :401,\n  msg :\"当前请求需要用户验证.\",\n}\n\n \n\nexport {graphqlError,unsupported ,unauthorized };\n","// 整体输出\nexport * from './httpCode';","// import {\n//   GraphQLObjectType,\n//   GraphQLNonNull,\n//   GraphQLSchema,\n//   GraphQLString,\n//   GraphQLList,\n// } from \"graphql/type\";\nimport {\n  graphql,\n  Source,\n  validateSchema,\n  parse,\n  validate,\n  execute,\n  formatError,\n  getOperationAST,\n  specifiedRules,\n  validationRules,\n  // gql,\n} from \"graphql\";\nimport httpError from \"http-errors\";\nimport { createToken, checkToken, destroyToken, getUserIfo } from \"@/redis\";\nimport { merge } from \"@/utils\";\nimport { graphqlError } from \"@/constant\";\nimport Router from \"koa-router\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { makeExecutableSchema } from \"graphql-tools\";\n// import Home from \"./home\";\nimport User from \"./user\";\nimport { common } from \"@/middleware/index\";\nimport { router as bizModRouter } from \"@/bizMod/index\";\nimport { unsupported, unauthorized } from \"@/constant\";\n// import { schema } from \"@/graphql/schema\";\nimport  App  from \"@/view/App\";\nimport { renderToString } from 'react-dom/server';\n\n// console.log(\"bizModRouter======\", bizModRouter);\n// console.log(\"schema======\", schema.typeDefs.schema);\n// console.log('App===',App)\nconst typeDefs = `\n  type Query {\n    hello: String\n  }\n`;\n\n// Provide resolver functions for your schema fields\nconst resolvers = {\n  Query: {\n    hello: () => \"Hello world!\",\n  },\n};\n\nclass Route {\n  constructor(app) {\n    this.app = app;\n    // this.router = router;\n    this.init();\n  }\n  createRouter() {\n    this.router = new Router({\n      prefix: \"/api\", // 给路由统一加个前缀：\n    });\n  }\n  // 添加中间件\n  middleware() {\n    // 添加 404 500 中间件\n    common(this.app, this.router);\n  }\n\n  checkToken() {\n    this.router.use(async (ctx, next) => {\n      const {\n        request: { header },\n        cookies,\n        response,\n      } = ctx;\n\n      const token = cookies.get(\"token\") || header.token;\n\n      await getUserIfo(token)\n        .then(async (value) => {\n          console.log(\"value=\", value);\n          response.userInfo = value;\n          await next();\n        })\n        .catch((error) => {\n          response.userInfo = null;\n          ctx.response.body = merge(unauthorized, {\n            msg: \"登录回话已过期，请重新登录\",\n          });\n        });\n\n      //  await next();\n    });\n  }\n  // 添加路由\n  addRouters() {\n    new User(this.app, this.router);\n    bizModRouter(this.app, this.router);\n\n    // new bizMod.abnormity.script.router(this.app, this.router)\n\n    console.log(\"checkToken====\");\n\n    this.checkToken();\n\n    // 查询\n    // this.router.get(\"/data\", async (ctx, next) => {\n    //   const {\n    //     query: { query = \"\", variables = {} },\n    //     response,\n    //     request,\n    //   } = ctx;\n    //   const {\n    //     body: {\n    //       // mutation = '', variables = {}\n    //     },\n    //   } = request;\n\n    //   // console.log('cookies===', cookies.get('token'));\n    //   // const { query = '', variables = {} } = ctx.query;\n    //   // const { response } = ctx;\n    //   // console.log('schema==',schema)\n    //   // console.log(\"query==\", query);\n    //   // console.log(\"variables==\", variables);\n    //   // console.log(\"token=====\", ctx.cookies.get(\"token\"));\n    //   // ctx.response.body = {\n    //   //   name:'123'\n    //   // }\n    //   const baseSchema = `\n    //                 schema {\n    //                     query: Query\n    //                     mutation: Mutation\n    //                 }\n    //           `;\n\n    //   const schema = makeExecutableSchema({\n    //     typeDefs: [\n    //       schema.typeDefs.schema\n    //       // baseSchema,\n    //       // typeDefs,\n    //       //   baseSchema,\n    //       //   userType,\n    //       //   songType,\n    //       //   playlistType\n    //     ],\n    //     resolvers: schema.resolvers,\n    //     //  merge(\n    //     //   {},\n    //     //   userResolvers,\n    //     //   songResolvers,\n    //     //   playlistResolvers\n    //     // )\n    //   });\n\n    //   await graphql(schema, query, { ctx, next }, variables)\n    //     .then((data) => {\n    //       const { errors } = data;\n    //       // console.log(\"data=\", data);\n    //       // console.log(\"stringify data=\", JSON.stringify(data));\n\n    //       if (errors) {\n    //         response.body = merge(graphqlError, {\n    //           errors,\n    //         });\n    //       } else {\n    //         // console.log(\"get==\", data);\n    //         // ctx.response.body = {\n    //         //   name:'123'\n    //         // }\n    //         response.body = data;\n\n    //         // JSON.stringify(data);\n    //       }\n    //     })\n    //     .catch((error) => {\n    //       console.log(\"error==\", error);\n    //     });\n    // });\n    // //变异\n    // this.router.post('/data', async (ctx, next) => {\n    //     const {\n    //         // query: { query = '', variables = {} },\n    //         response,\n    //         request,\n    //     } = ctx;\n    //     const {\n    //         body: { mutation = '', variables = {} },\n    //     } = request;\n    //     await graphql(schema, mutation, { ctx, next }, variables)\n    //         .then((data) => {\n    //             const { errors } = data;\n    //             if (errors) {\n    //                 response.body = merge(graphqlError, {\n    //                     errors,\n    //                 });\n    //             } else {\n    //                 console.log('post==', data);\n    //                 response.body = data;\n    //             }\n    //         })\n    //         .catch((error) => {\n    //             console.log('error==', error);\n    //         });\n    // });\n\n    //  const server = new ApolloServer({ typeDefs, resolvers });\n\n    //  this.router.get('/data',server.getMiddleware())\n\n    this.router.get('*', async (ctx, next) => {\n      ctx.response.type = 'html'; //指定content type\n      let shtml = '';\n      console.log('html====')\n      await new Promise((resolve, reject) => {\n        fs.readFile(path.join(__dirname, '../build/index.html'), 'utfa8', function(err, data) {\n          if (err) {\n            reject();\n            return console.log(err);\n          }\n          shtml = data;\n          resolve();\n        });\n      });\n      // 替换掉 {{root}} 为我们生成后的HTML\n      ctx.response.body = shtml.replace('{{root}}', renderToString(<App />));\n    })\n   \n \n\n\n    // 挂载路由中间件\n    this.app.use(this.router.routes()).use(this.router.allowedMethods());\n\n    // this.app.use(this.router.routes()).use(this.router.allowedMethods());\n  }\n  init() {\n    // 添加中间件\n    this.middleware();\n    //创建路由\n    this.createRouter();\n\n    // 添加路由\n    this.addRouters();\n  }\n}\n\nexport default Route;\n","module.exports = require(\"graphql\");;","module.exports = require(\"graphql-tools\");;"],"sourceRoot":""}