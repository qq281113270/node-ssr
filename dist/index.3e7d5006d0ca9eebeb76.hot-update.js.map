{"version":3,"sources":["webpack:///./app/config/index.js?undefined","webpack:///./app/config/token.js?undefined","webpack:///./app/constant/httpCode.js?undefined","webpack:///./app/constant/index.js?undefined","webpack:///./app/controller/user.js?undefined","webpack:///./app/db/user.js?undefined","webpack:///./app/redis/index.js?undefined","webpack:///./app/redis/jwt.js?undefined","webpack:///./app/routes/index.js?undefined","webpack:///./app/routes/user.js?undefined","webpack:///./app/service/user.js?undefined"],"names":["setExpirationTime","millisecond","Date","getTime","expiresTime","tokenExpires","graphqlError","code","msg","unsupported","unauthorized","Controller","add","ctx","next","parameter","request","body","data","userService","getMessage","status","message","merge","response","edit","set","page","params","login","token","userInfo","addUser","name","phone","password","sql","exec","queryUser","andConditionData","orConditionData","andKeys","Object","keys","orKeys","forEach","key","length","substring","deleteUser","id","sign","verify","decode","webJwt","userIdCheckToken","userId","promise","resolve","reject","redisClient","error","value","checkToken","createToken","payload","ctime","now","expiresIn","userIdTokens","Redis","del","JSON","stringify","pexpire","destroyToken","tokenOrId","tokens","typeDefs","resolvers","Query","hello","Route","constructor","app","init","createRouter","router","Router","prefix","middleware","common","use","header","cookies","get","getUserIfo","then","console","log","catch","addRouters","type","shtml","Promise","fs","path","__dirname","err","replace","renderToString","routes","allowedMethods","secondaryRoute","registered","post","controller","Service","list","dataList","time","title","url","username","ags","userData","httpOnly","overwrite","expires"],"mappings":"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","file":"index.3e7d5006d0ca9eebeb76.hot-update.js","sourcesContent":["export * from './db.js';\nexport * from './redis.js';\nexport * from './token.js';\nexport * from './constant.js';\n\n// export const MYSQL_CONF={\n//     name:123\n// }\n","import { tokenExpires } from './constant';\n\nexport const setExpirationTime = () => {\n    const millisecond = new Date().getTime();\n    const expiresTime = new Date(millisecond + tokenExpires); //一天后过期\n\n    return  expiresTime // da.toUTCString(); //将 1598789234953这种格式的转换成=> \"Sat, 29 Aug 2020 12:06:33 GMT\"\n};\n","const graphqlError = {\n  code :400,\n  msg :\"请求参数有误，graphql语法错误\",\n}\n\n\nconst unsupported = {\n  //对于当前请求的方法和所请求的资源，请求中提交的实体并不是服务器中所支持的格式，因此请求被拒绝。\n  code :415,\n  msg :\"服务器已经理解请求，但是拒绝执行它\",\n}\n\nconst unauthorized = {\n  // 当前请求需要用户验证. 如果验证不通过则返回401\n  code :401,\n  msg :\"当前请求需要用户验证.\",\n}\n\n \n\nexport {graphqlError,unsupported ,unauthorized };\n","// 整体输出\nexport * from './httpCode';","import userService from \"../service/user\";\nimport { unsupported, unauthorized } from \"../constant\";\nimport { merge } from \"../utils\";\nclass Controller {\n  static async add(ctx, next) {\n    // ctx.set(\"Content-Type\", \"application/json\")\n    const parameter = ctx.request.body; // 获取请求参数\n    //添加service\n    const data = await userService.add(ctx, next, parameter);\n    const getMessage = (data) => {\n      const { status } = data;\n      const message = {\n        1: () =>\n          merge(unsupported, {\n            msg: \"该用户名已经被注册过,请重新输入用户名\",\n          }),\n        2: () =>\n          merge(unsupported, {\n            msg: \"该手机号码已经被注册过,请重新输入手机号码\",\n          }),\n        3: () => ({\n          code: 200,\n          msg: \"注册成功\",\n        }),\n      };\n      return message[status]();\n    };\n    ctx.response.body = getMessage(data);\n  }\n  static edit(ctx, next) {\n    ctx.set(\"Content-Type\", \"application/json\");\n\n    var page = ctx.params.page; // 获取请求参数\n    //添加service\n    // const data = userService.list(page);\n\n    // ctx.response.body = \"d\";\n  }\n\n  static async login(ctx, next) {\n    // ctx.set(\"Content-Type\", \"application/json\")\n    var parameter = ctx.request.body; // 获取请求参数\n    //添加service\n    const data = await userService.login(ctx, next, parameter);\n    const getMessage = (data) => {\n      const { status, token, userInfo } = data;\n      const message = {\n        1: () =>\n          merge(unauthorized, {\n            msg: \"用户名错误，请重新输入用户名\",\n          }),\n        2: () =>\n          merge(unauthorized, {\n            msg: \"密码错误请重新输入密码\",\n          }),\n        3: () => ({\n          code: 200,\n          msg: \"登录成功\",\n          data: {\n            token,\n            userInfo,\n          },\n        }),\n      };\n      return message[status]();\n    };\n    ctx.response.body = getMessage(data);\n  }\n}\n\nexport default Controller;\n","import { connection, exec } from \"./mysql\";\n// 添加用户\nconst addUser = async ({ name, phone, password }) => {\n  const sql = `insert into user(name,phone,password) values('${name}','${phone}',md5('${password}'));`;\n \n  return await exec(sql);\n};\n\n//查询用户\nconst queryUser = async (andConditionData = {}, orConditionData = {}, sql) => {\n  const andKeys = Object.keys(andConditionData);\n  const orKeys = Object.keys(orConditionData);\n  if (sql) {\n    return await exec(sql);\n  }\n  sql = `select * from user where `;\n\n  andKeys.forEach((key) => {\n    sql +=\n      key == \"password\"\n        ? ` ${key}=md5('${andConditionData[key]}') and`\n        : ` ${key}='${andConditionData[key]}' and`;\n  });\n\n  orKeys.forEach((key) => {\n    sql +=\n      key == \"password\"\n        ? ` ${key}=md5('${orConditionData[key]}') or`\n        : ` ${key}='${orConditionData[key]}' or`;\n  });\n  sql =\n    andKeys.length >= 1 && orKeys.length == 0\n      ? sql.substring(0, sql.length - 3)\n      : orKeys.length >= 1\n      ? sql.substring(0, sql.length - 2)\n      : sql;\n\n  \n  return await exec(sql);\n};\n\n//删除用户\nconst deleteUser = async (id) => {\n  const sql = `DELETE  FROM user  WHERE id=${id};`;\n  return await exec(sql);\n};\n\n// 导出\nexport { addUser, deleteUser, queryUser };\n","import RedisClass,{\n    Redis,\n    redisClient\n} from \"./redis\";\n \n\nexport    {\n    Redis,\n    redisClient,\n    RedisClass \n};\n\nexport *  from \"./jwt\";\nexport *  from \"./user\";\n ","import { Redis, redisClient } from \"./redis\";\nimport JWTR from \"jwt-redis\";\nimport webJwt from \"jsonwebtoken\";\nimport { merge, promise } from \"@/utils\";\nimport { tokenExpires } from '@/config';\nconst { sign, verify, decode } = webJwt;\n\n// 用用户id验证token\nconst userIdCheckToken = (userId) => {\n  return promise((resolve, reject) => {\n    redisClient.keys(`userid_${userId}_*`, (error, value) => {\n      if (error) {\n        reject(error);\n      } else {\n        resolve(value);\n      }\n    });\n  });\n};\n\n//验证token\nconst checkToken = (token) => {\n  return promise((resolve, reject) => {\n    redisClient.keys(`userid_*_${token}`, (error, value) => {\n      if (error) {\n        reject(error);\n      } else {\n        resolve(value);\n      }\n    });\n  });\n};\n\nconst createToken = async (userInfo = {}, payload = {}) => {\n  const { id = \"\" } = userInfo;\n  //  产生token\n  payload = merge(\n    {\n      ctime: Date.now(), //创建时间\n    },\n    payload\n  );\n  //创建token\n  const token = await sign(payload, `${id}`, { expiresIn: 0 });\n  //获取用户token key\n  const userIdTokens = await userIdCheckToken(id);\n  if (userIdTokens && userIdTokens.length >= 1) {\n    // 删除多余的key实现单点登录\n    userIdTokens.forEach(async (key) => {\n      await Redis.del(key);\n    });\n  }\n  // 重新设置 redis \n  await Redis.set(`userid_${id}_${token}`, JSON.stringify(userInfo));\n  redisClient.pexpire(`userid_${id}_${token}`,tokenExpires)\n\n  return token;\n};\n\n//销毁token\nconst destroyToken = async(tokenOrId) => {\n  const userIdTokens = await userIdCheckToken(tokenOrId)||[];\n  const tokens = await checkToken(tokenOrId)||[];\n  merge(userIdTokens,tokens).forEach(async (key)=>{\n    await Redis.del(key);\n  }) \n  return \"成功删除token\"\n};\n\n\nexport { createToken, checkToken, destroyToken,userIdCheckToken };\n","// import {\n//   GraphQLObjectType,\n//   GraphQLNonNull,\n//   GraphQLSchema,\n//   GraphQLString,\n//   GraphQLList,\n// } from \"graphql/type\";\nimport {\n  graphql,\n  Source,\n  validateSchema,\n  parse,\n  validate,\n  execute,\n  formatError,\n  getOperationAST,\n  specifiedRules,\n  validationRules,\n  // gql,\n} from \"graphql\";\nimport httpError from \"http-errors\";\nimport { createToken, checkToken, destroyToken, getUserIfo } from \"@/redis\";\nimport { merge } from \"@/utils\";\nimport { graphqlError } from \"@/constant\";\nimport Router from \"koa-router\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { makeExecutableSchema } from \"graphql-tools\";\n// import Home from \"./home\";\nimport User from \"./user\";\nimport { common } from \"@/middleware/index\";\nimport { router as bizModRouter } from \"@/bizMod/index\";\nimport { unsupported, unauthorized } from \"@/constant\";\n// import { schema } from \"@/graphql/schema\";\nimport  App  from \"@/view/App\";\nimport { renderToString } from 'react-dom/server';\n\n// console.log(\"bizModRouter======\", bizModRouter);\n// console.log(\"schema======\", schema.typeDefs.schema);\n// console.log('App===',App)\nconst typeDefs = `\n  type Query {\n    hello: String\n  }\n`;\n\n// Provide resolver functions for your schema fields\nconst resolvers = {\n  Query: {\n    hello: () => \"Hello world!\",\n  },\n};\n\nclass Route {\n  constructor(app) {\n    this.app = app;\n    // this.router = router;\n    this.init();\n  }\n  createRouter() {\n    this.router = new Router({\n      prefix: \"/api\", // 给路由统一加个前缀：\n    });\n  }\n  // 添加中间件\n  middleware() {\n    // 添加 404 500 中间件\n    common(this.app, this.router);\n  }\n\n  checkToken() {\n    this.router.use(async (ctx, next) => {\n      const {\n        request: { header },\n        cookies,\n        response,\n      } = ctx;\n\n      const token = cookies.get(\"token\") || header.token;\n\n      await getUserIfo(token)\n        .then(async (value) => {\n          console.log(\"value=\", value);\n          response.userInfo = value;\n          await next();\n        })\n        .catch((error) => {\n          response.userInfo = null;\n          ctx.response.body = merge(unauthorized, {\n            msg: \"登录回话已过期，请重新登录\",\n          });\n        });\n\n      //  await next();\n    });\n  }\n  // 添加路由\n  addRouters() {\n    // new User(this.app, this.router);\n    // bizModRouter(this.app, this.router);\n\n    // new bizMod.abnormity.script.router(this.app, this.router)\n\n    console.log(\"checkToken====\");\n\n    // this.checkToken();\n\n    // 查询\n    // this.router.get(\"/data\", async (ctx, next) => {\n    //   const {\n    //     query: { query = \"\", variables = {} },\n    //     response,\n    //     request,\n    //   } = ctx;\n    //   const {\n    //     body: {\n    //       // mutation = '', variables = {}\n    //     },\n    //   } = request;\n\n    //   // console.log('cookies===', cookies.get('token'));\n    //   // const { query = '', variables = {} } = ctx.query;\n    //   // const { response } = ctx;\n    //   // console.log('schema==',schema)\n    //   // console.log(\"query==\", query);\n    //   // console.log(\"variables==\", variables);\n    //   // console.log(\"token=====\", ctx.cookies.get(\"token\"));\n    //   // ctx.response.body = {\n    //   //   name:'123'\n    //   // }\n    //   const baseSchema = `\n    //                 schema {\n    //                     query: Query\n    //                     mutation: Mutation\n    //                 }\n    //           `;\n\n    //   const schema = makeExecutableSchema({\n    //     typeDefs: [\n    //       schema.typeDefs.schema\n    //       // baseSchema,\n    //       // typeDefs,\n    //       //   baseSchema,\n    //       //   userType,\n    //       //   songType,\n    //       //   playlistType\n    //     ],\n    //     resolvers: schema.resolvers,\n    //     //  merge(\n    //     //   {},\n    //     //   userResolvers,\n    //     //   songResolvers,\n    //     //   playlistResolvers\n    //     // )\n    //   });\n\n    //   await graphql(schema, query, { ctx, next }, variables)\n    //     .then((data) => {\n    //       const { errors } = data;\n    //       // console.log(\"data=\", data);\n    //       // console.log(\"stringify data=\", JSON.stringify(data));\n\n    //       if (errors) {\n    //         response.body = merge(graphqlError, {\n    //           errors,\n    //         });\n    //       } else {\n    //         // console.log(\"get==\", data);\n    //         // ctx.response.body = {\n    //         //   name:'123'\n    //         // }\n    //         response.body = data;\n\n    //         // JSON.stringify(data);\n    //       }\n    //     })\n    //     .catch((error) => {\n    //       console.log(\"error==\", error);\n    //     });\n    // });\n    // //变异\n    // this.router.post('/data', async (ctx, next) => {\n    //     const {\n    //         // query: { query = '', variables = {} },\n    //         response,\n    //         request,\n    //     } = ctx;\n    //     const {\n    //         body: { mutation = '', variables = {} },\n    //     } = request;\n    //     await graphql(schema, mutation, { ctx, next }, variables)\n    //         .then((data) => {\n    //             const { errors } = data;\n    //             if (errors) {\n    //                 response.body = merge(graphqlError, {\n    //                     errors,\n    //                 });\n    //             } else {\n    //                 console.log('post==', data);\n    //                 response.body = data;\n    //             }\n    //         })\n    //         .catch((error) => {\n    //             console.log('error==', error);\n    //         });\n    // });\n\n    //  const server = new ApolloServer({ typeDefs, resolvers });\n\n    //  this.router.get('/data',server.getMiddleware())\n\n    this.router.get('*', async (ctx, next) => {\n      ctx.response.type = 'html'; //指定content type\n      let shtml = '';\n      console.log('html====')\n      await new Promise((resolve, reject) => {\n        fs.readFile(path.join(__dirname, '../build/index.html'), 'utfa8', function(err, data) {\n          if (err) {\n            reject();\n            return console.log(err);\n          }\n          shtml = data;\n          resolve();\n        });\n      });\n      // 替换掉 {{root}} 为我们生成后的HTML\n      ctx.response.body = shtml.replace('{{root}}', renderToString(<App />));\n    })\n   \n \n\n\n    // 挂载路由中间件\n    this.app.use(this.router.routes()).use(this.router.allowedMethods());\n\n    // this.app.use(this.router.routes()).use(this.router.allowedMethods());\n  }\n  init() {\n    // 添加中间件\n    this.middleware();\n    //创建路由\n    this.createRouter();\n\n    // 添加路由\n    this.addRouters();\n  }\n}\n\nexport default Route;\n","import controller from \"../controller/user\";\nimport Router from \"koa-router\"; // koa 路由中间件\n\nclass Route {\n  constructor(app, router) {\n    this.app = app;\n    this.router = router;\n    this.init();\n  }\n  createRouter() {\n    this.secondaryRoute = new Router({\n      prefix: \"/user\", // 给路由统一加个前缀：\n    });\n    return this.secondaryRoute;\n  }\n  middleware() {\n    // 处理404\n    // this.app.use('/user',function* (next) {\n    //     try {\n    //         yield* next;\n    //     } catch (e) {\n    //         this.status = 500;\n    //         this.body = '500';\n    //     }\n    //     if (parseInt(this.status) === 404) {\n    //         this.body = '404';\n    //     }\n    // });\n  }\n  // 添加路由\n  addRouters() {\n    // 添加路由\n    this.registered();\n    this.login();\n    this.router.use(this.secondaryRoute.routes()); //挂载二级路由\n  }\n  init() {\n    // 创建路由\n    this.createRouter();\n    // 添加中间件\n    this.middleware();\n    // 添加路由\n    this.addRouters();\n  }\n  registered() {\n    // 添加 接口\n    this.secondaryRoute.post(\"/register\", controller.add);\n  }\n  login() {\n    // 添加 接口\n    this.secondaryRoute.post(\"/login\", controller.login);\n  }\n}\n\nexport default Route;\n","import { addUser, deleteUser, queryUser } from '../db/user';\nimport { unsupported, unauthorized } from '../constant';\nimport { merge } from '../utils';\nimport { createToken, checkToken, destroyToken, getUserIfo } from '@/redis';\nimport { setExpirationTime } from '../config';\n\nclass Service {\n    static list(page) {\n        console.log('page=', page);\n        const dataList = {\n            list: [\n                {\n                    time: '2019-7-10',\n                    id: 1,\n                    title: 'this is news 1',\n                    url: '/news/1',\n                },\n                {\n                    time: '2019-8-10',\n                    id: 2,\n                    title: 'this is news 2',\n                    url: '/news/2',\n                },\n            ],\n        };\n\n        return dataList.list[page] || {};\n    }\n\n    //注册用户\n    static async add(ctx, next, parameter) {\n        const { username: name, phone, password } = parameter;\n        /*\n     1 查询用户名是否被注册过，\n     2 查询手机号码是否被注册过\n     3 如果都没有被注册那么就可以注册\n    */\n        let userInfo = await this.queryUser({\n            name,\n        });\n\n        userInfo = userInfo.length >= 1 ? userInfo[0] : null;\n        if (userInfo && userInfo.id) {\n            return {\n                status: 1,\n            };\n        }\n\n        userInfo = await this.queryUser({\n            phone,\n        });\n        userInfo = userInfo.length >= 1 ? userInfo[0] : null;\n        if (userInfo && userInfo.id) {\n            return {\n                status: 2,\n            };\n        }\n        const data = await addUser({\n            name,\n            phone,\n            password,\n        });\n        if (data) {\n            return {\n                status: 3,\n            };\n        }\n    }\n    // 编辑用户\n    static async edit(ctx, next, parameter) {}\n    // 数据库中查询用户\n    static async queryUser(...ags) {\n        const userData = await queryUser(...ags);\n        return userData;\n    }\n    // 登录\n    static async login(ctx, next, parameter = {}) {\n        const { username: name, phone, password } = parameter;\n        const { request, response, cookies } = ctx;\n\n        /*\n      1.先查询用户名是否正确，\n      2.查询用户和密码是否正确\n      3.创建token,存储到redis中\n      4.把用户信息挂载response中\n    */\n        let userInfo = await this.queryUser({\n            name,\n        });\n\n        userInfo = userInfo.length >= 1 ? userInfo[0] : null;\n        if (!userInfo) {\n            return {\n                status: 1,\n            };\n        }\n\n        userInfo = await this.queryUser({\n            password,\n        });\n        userInfo = userInfo.length >= 1 ? userInfo[0] : null;\n        if (!userInfo) {\n            return {\n                status: 2,\n            };\n        }\n        userInfo = await queryUser({\n            name,\n            password,\n        });\n        userInfo = userInfo.length >= 1 ? userInfo[0] : null;\n\n        /*\n     创建 createToken  \n    */\n        const token = await createToken(userInfo);\n        delete userInfo.password;\n        ctx.response.userInfo = userInfo;\n        console.log('setExpirationTime=', setExpirationTime());\n        // console.log('token=', token);\n        // console.log('request=', request);\n        // console.log('session=', session);\n        console.log('cookies===', cookies.get('token'));\n\n        // cookie.expires = false;\n        // cookie.maxAge = 5 * 60 * 1000;\n        cookies.set('token', token, {\n            httpOnly: false,\n            overwrite: false,\n            expires: setExpirationTime(),\n            // domain: 'http://localhost/',\n        });\n        if (userInfo) {\n            //登录成功\n            return {\n                status: 3,\n                token,\n                userInfo,\n            };\n        }\n    }\n}\n\nexport default Service;\n"],"sourceRoot":""}